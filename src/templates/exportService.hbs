{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
import type { CancelablePromise } from '../core/CancelablePromise';
import { ClientOptions } from '../core/OpenAPI';
import { request as __request } from '../core/request';
import { {{>apiResultExport}} } from '../core/ApiResult';

{{#equals @root.httpClient 'angular'}}
@Injectable({
  providedIn: 'root',
})
{{/equals}}
export class {{{name}}}{{{@root.postfix}}} {
	{{#if @root.exportClient}}

	constructor(public readonly httpRequest: BaseHttpRequest) {}
	{{else}}
	{{#equals @root.httpClient 'angular'}}

	constructor(public readonly http: HttpClient) {}
	{{/equals}}
	{{/if}}

	{{#each operations}}
	private static __mapResponse_{{{name}}}(
		response: ApiResult<{{>resultRaw}}>,
	): {{>resultsToResponse}} {
		{{#each results}}
		if ({{#lt code 400}}!response.error{{/lt}}{{#gte code 400}}response.error{{/gte}} && response.httpCode==={{{code}}}) {
			return response as {{>resultToResponse}};
		}
		{{/each}}
		if (response.error && response.httpCode===0) {
			return response as ApiNetworkErrorResponse;
		}
		return {
			...response,
			httpCode: 0,
			error: {
				message: "Unmapped response",
				originalHttpCode: response.httpCode,
				originalError: response.error,
			},
		} as ApiUnmappedResponse;
	}

	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	 */
	{{#if @root.exportClient}}
	public {{{name}}}({{>parameters}}): CancelablePromise<{{>resultRaw}}> {
		return this.httpRequest.request({
	{{else}}
	public static {{{name}}}(client: ClientOptions{{#if parameters}}, {{/if}}{{>parameters}}, abortSignal?: AbortSignal):
		CancelablePromise<{{>resultsToResponse}}> {
		return __request<{{>resultRaw}}>(client, {
	{{/if}}
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if results}}
				{{>responseType}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if errors}}
			errors: {
				{{#each errors}}
				{{{code}}}: `{{{escapeDescription description}}}`,
				{{/each}}
			},
			{{/if}}
			abortSignal,
		}).then({{{../name}}}{{{@root.postfix}}}.__mapResponse_{{{name}}});
	}

	{{/each}}
}
