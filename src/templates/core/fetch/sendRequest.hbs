interface ClearableSignal extends AbortSignal {
  clear: () => void
}

function anySignal (signals: Array<AbortSignal | undefined | null>): ClearableSignal {
  const controller = new globalThis.AbortController()

  function onAbort (): void {
    controller.abort()

    for (const signal of signals) {
      if (signal?.removeEventListener != null) {
        signal.removeEventListener('abort', onAbort)
      }
    }
  }

  for (const signal of signals) {
    if (signal?.aborted === true) {
      onAbort()
      break
    }

    if (signal?.addEventListener != null) {
      signal.addEventListener('abort', onAbort)
    }
  }

  function clear (): void {
    for (const signal of signals) {
      if (signal?.removeEventListener != null) {
        signal.removeEventListener('abort', onAbort)
      }
    }
  }

  const signal = controller.signal as ClearableSignal
  signal.clear = clear

  return signal
}

export const sendRequest = async (
	client: ClientOptions,
	options: ApiRequestOptions,
	url: string,
	body: any,
	formData: FormData | undefined,
	headers: Headers,
	onCancel: OnCancel
): Promise<Response> => {
	const controller = new AbortController();
	const signal = client.timeoutMsec
		? anySignal([
			controller.signal,
			AbortSignal.timeout(client.timeoutMsec)
		])
		: controller.signal;

	const request: RequestInit = {
		headers,
		body: body ?? formData,
		method: options.method,
		signal,
	};

	onCancel(() => controller.abort());

	return await fetch(url, request);
};
