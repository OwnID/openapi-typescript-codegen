{{>header}}

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { ClientOptions } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrorCodes}}


/**
 * Request method
 * @param client The OpenAPI client object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(client: ClientOptions, options: ApiRequestOptions): CancelablePromise<ApiResult<T>> => {
	return new CancelablePromise(async (resolve, reject, onCancel) => {
		const url = getUrl(client, options);
		const formData = getFormData(options);
		const body = getRequestBody(options);
		const headers = await getHeaders(client, options);
		try {
			if (!onCancel.isCancelled) {
				const response = await sendRequest(client, options, url, body, formData, headers, onCancel);
				const responseBody = await getResponseBody(response, options);
				const responseHeader = getResponseHeader(response, options.responseHeader);
				const resultBody = responseHeader ?? responseBody;

				const result: ApiResult<T> = {
					url,
					type: response.ok ? 'success' : 'failure',
					httpCode: response.status,
					httpCodeText: response.statusText,
					responseHeaders: headers,
					body: resultBody,
					error: catchErrorCodes(options, response.ok, response.status, response.statusText, resultBody),
				};

				resolve(result);
			}
		} catch (error) {
			resolve({
				url,
				type: 'failure',
				httpCode: 0,
				httpCodeText: '',
				body: JSON.stringify(error) as T,
				responseHeaders: headers,
				error,
			});
		}
	});
};
